# -*- coding: utf-8 -*-
"""yolosegmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LURieQ7I8suG57lp80fhp7Jac-uoVhCj
"""

pip install ultralytics opencv-python

import cv2
import numpy as np
from ultralytics import YOLO
from google.colab.patches import cv2_imshow

# Load model YOLOv8 untuk segmentasi
model = YOLO('/content/yolov8n-seg.pt')

# Fungsi untuk melakukan segmentasi objek menggunakan YOLOv8
def segment_objects(image):
    results = model(image)
    return results

# Fungsi untuk menampilkan hasil segmentasi objek
def display_segmentation(image, results):
    for result in results:
        masks = result.masks.data.cpu().numpy()
        boxes = result.boxes.xyxy.cpu().numpy()
        classes = result.boxes.cls.cpu().numpy()

        for mask, box, cls in zip(masks, boxes, classes):
            color = tuple(map(int, np.random.randint(0, 255, size=3)))
            x1, y1, x2, y2 = map(int, box)

            # Menampilkan kotak pembatas (bounding box)
            cv2.rectangle(image, (x1, y1), (x2, y2), color, 2)

            # Menampilkan label kelas
            label = model.names[int(cls)]
            cv2.putText(image, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)

            # Menampilkan mask segmentasi
            mask = mask.astype(np.uint8) * 255
            mask_color = cv2.applyColorMap(mask, cv2.COLORMAP_JET)
            mask_color = cv2.resize(mask_color, (x2 - x1, y2 - y1))  # Mengubah ukuran mask_color agar sesuai dengan ukuran gambar
            image[y1:y2, x1:x2] = cv2.addWeighted(image[y1:y2, x1:x2], 0.5, mask_color, 0.5, 0)

    return image

# Fungsi untuk mengambil keputusan berdasarkan hasil segmentasi
def make_decision(results):
    # Logika pengambilan keputusan berdasarkan hasil segmentasi
    # Contoh: Jika terdeteksi objek "person", berhenti
    for result in results:
        classes = result.boxes.cls.cpu().numpy()
        if 0 in classes:  # Kelas 0 adalah "person"
            return "Berhenti"

    return "Bergerak"

# Fungsi utama untuk kendaraan autonomous
def autonomous_vehicle():
    # Inisialisasi sumber video
    video_path = "/content/driving.mp4"  # Ganti dengan path video Anda
    cap = cv2.VideoCapture(video_path)

    while True:
        # Membaca frame dari video
        ret, frame = cap.read()

        if not ret:
            break

        # Melakukan segmentasi objek menggunakan YOLOv8
        results = segment_objects(frame)

        # Menampilkan hasil segmentasi objek
        frame = display_segmentation(frame, results)

        # Mengambil keputusan berdasarkan hasil segmentasi
        decision = make_decision(results)

        # Menampilkan keputusan pada frame
        cv2.putText(frame, decision, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

        # Menampilkan frame menggunakan cv2_imshow()
        cv2_imshow(frame)

        # Keluar dari loop jika tombol 'q' ditekan
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Menutup semua jendela dan melepaskan sumber daya
    cap.release()
    cv2.destroyAllWindows()

# Menjalankan program kendaraan autonomous
autonomous_vehicle()

import cv2
import numpy as np
from ultralytics import YOLO
from google.colab.patches import cv2_imshow

# Load model YOLOv8 untuk segmentasi
model = YOLO('/content/yolov8n-seg.pt')

# Fungsi untuk melakukan segmentasi objek menggunakan YOLOv8
def segment_objects(image):
    results = model(image)
    return results

# Fungsi untuk menampilkan hasil segmentasi objek
def display_segmentation(image, results):
    for result in results:
        masks = result.masks.data.cpu().numpy()
        boxes = result.boxes.xyxy.cpu().numpy()
        classes = result.boxes.cls.cpu().numpy()

        for mask, box, cls in zip(masks, boxes, classes):
            color = tuple(map(int, np.random.randint(0, 255, size=3)))
            x1, y1, x2, y2 = map(int, box)

            # Menampilkan kotak pembatas (bounding box)
            cv2.rectangle(image, (x1, y1), (x2, y2), color, 2)

            # Menampilkan label kelas
            label = model.names[int(cls)]
            cv2.putText(image, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)

            # Menampilkan mask segmentasi
            mask = mask.astype(np.uint8) * 255
            mask_color = cv2.applyColorMap(mask, cv2.COLORMAP_JET)
            mask_color = cv2.resize(mask_color, (x2 - x1, y2 - y1))  # Mengubah ukuran mask_color agar sesuai dengan ukuran gambar
            image[y1:y2, x1:x2] = cv2.addWeighted(image[y1:y2, x1:x2], 0.5, mask_color, 0.5, 0)

    return image

# Fungsi untuk mengambil keputusan berdasarkan hasil segmentasi
def make_decision(results):
    # Logika pengambilan keputusan berdasarkan hasil segmentasi
    # Contoh: Jika terdeteksi objek "person", berhenti
    for result in results:
        classes = result.boxes.cls.cpu().numpy()
        if 0 in classes:  # Kelas 0 adalah "person"
            return "Berhenti"

    return "Bergerak"

# Fungsi utama untuk kendaraan autonomous
def autonomous_vehicle():
    # Inisialisasi sumber video
    video_path = "/content/newyork.mp4"  # Ganti dengan path video Anda
    cap = cv2.VideoCapture(video_path)

    while True:
        # Membaca frame dari video
        ret, frame = cap.read()

        if not ret:
            break

        # Melakukan segmentasi objek menggunakan YOLOv8
        results = segment_objects(frame)

        # Menampilkan hasil segmentasi objek
        frame = display_segmentation(frame, results)

        # Mengambil keputusan berdasarkan hasil segmentasi
        decision = make_decision(results)

        # Menampilkan keputusan pada frame
        cv2.putText(frame, decision, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

        # Menampilkan frame menggunakan cv2_imshow()
        cv2_imshow(frame)

        # Keluar dari loop jika tombol 'q' ditekan
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Menutup semua jendela dan melepaskan sumber daya
    cap.release()
    cv2.destroyAllWindows()

# Menjalankan program kendaraan autonomous
autonomous_vehicle()